// 1. 沙箱的定义：就是让程序跑在一个隔离的环境下，不对外界的其他程序造成影响
//      例子：浏览器打开的每一个页面都是沙箱，彼此独立互不干扰
// 2. with的作用：在于改变作用域；with语句将某个对象添加到作用域链的顶部

// 实现一个简单的沙箱，要求程序中访问的所有变量均来自可靠或自主实现的上下文环境，而不会从全局的执行环境中取值

// 定义全局变量foo
var foo = 'foo1';

// 执行上下文对象
const ctx = {
    func: variable => {
        console.log(variable)
    },
    foo: 'f1'
}

// 非常简陋的沙箱
function veryPoorSandbox(code, ctx) {
    // 使用with，将eval函数执行时的执行上下文指定为ctx
    with (ctx) {
        // eval可以将字符串按js代码执行，如eval('1+2')
        eval(code); 
    }
}

// 待执行程序
const code = `func(foo)`;

// 打印结果："f1"，不是最外层的全局变量"foo1"
veryPoorSandbox(code, ctx);

// 缺陷： 这个沙箱有一个明显的问题，若提供的上下文对象中没有找到某个变量时，代码仍会沿着作用域链一层一层向上查找，这样的一个沙箱仍然无法控制内部代码的执行
// 假如上文示例中的ctx对象没有设置foo属性，打印的结果还是外层作用域的foo1


// 个人问题（2023/12/18）：
//  1. 对with的使用方式以及作用还是不太明白
//  2. 对上下文以及作用域链的概念有点模糊了
//  3. 对eval的作用以及用法比较生疏